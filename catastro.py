# -*- coding: utf-8 -*-
"""
/***************************************************************************
 demoDockWidget
                                 A QGIS plugin
 demo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-01-24
        git sha              : $Format:%H$
        copyright            : (C) 2023 by -
        email                : -
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import * 
from qgis.utils import iface
from PyQt5.QtWidgets import *
from PyQt5.QtGui import (
        QIcon,
        QIntValidator,
        QDoubleValidator,
        QRegExpValidator
    )
from PyQt5.QtCore import QLocale
from .DriverDataBase import DataBaseDriver
from .resources import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'UI\demo_dockwidget_base.ui'))


class CatastroWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(CatastroWidget, self).__init__(parent)
        self.driver = DataBaseDriver()
        self.icons = {
            'search' : os.path.join(os.path.dirname(__file__), r'icon\search.svg'),
            'trash' : os.path.join(os.path.dirname(__file__), r'icon\trash-solid.svg')
        }
        self.plugin_dir = os.path.dirname(__file__)


       
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.UIComponents()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIComponents(self):
        self.tableWidget.horizontalHeader().setStretchLastSection(True)

        # clear_action = self.lineEdit.addAction(QIcon(self.icons['trash']), self.lineEdit.TrailingPosition)

        line_action = self.lineEdit.addAction(QIcon(self.icons['search']),self.lineEdit.TrailingPosition)
        line_action.triggered.connect(self.search)

        self.lineEdit.returnPressed.connect(self.search)
        self.lineEdit.textChanged.connect(self.search)

        self.tableWidget.doubleClicked.connect(self.loadLayer)

        # self.pushButton_2.clicked.connect(lambda: self.loadLayer(edit=True))

    

    def search(self):
        param = self.lineEdit.text()
        values = param.split() 
        q = ''
        # print(values)
        if len(values) > 1:
            for e in values: 
                q = q + '%' + e + '% '
        else:
            try: 
                q = '%' + values[0]  + '%'
            except IndexError:
                q = ''
                pass
        
        param  = q
        # print(param)
        if param == '':
            sql = '''select 
                codigo,
                codigodocumento ||' ' || documento,
                apellidos || ' ' || nombre as nombres, 
                direccion  from catastro.terrenosvista19 t 
                order by apellidos || ' ' || nombre '''
        else:
            sql = f'''select 
                codigo,
                codigodocumento ||' ' || documento,
                apellidos || ' ' || nombre as nombres, 
                direccion  from catastro.terrenosvista19
                where codigo = '{param[1:-1]}'
                or documento = '{param[1:-1]}'
                or nombre || ' ' || apellidos ilike '{param}'
                order by apellidos || ' ' || nombre '''
        
        try:
            r = self.driver.read(sql,as_dict=False )
            # print('resultado search',r)
            if len(r) > 0:
                self.populate(r)
        except Exception as ex: 
            print('error search',ex)

    def populate(self,data):
        try:
            # print(data)
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    # print(str(data[j][i]))
                    item = QTableWidgetItem(str(data[j][i]))
                    self.tableWidget.setItem(j, i, item)
        except Exception as ex:
            # QMessageBox.about(self, "Error:", "No Existen Registros")
            # QgsMessageLog.logMessage(f'{ex}', 'aGrae GIS', level=1)
            print('error populate',ex)

    def loadLayer(self,edit=False):
        
        style_terreno = r'\estilos\layer_terreno.qml'
        
        style_construcciones = r'\estilos\layer_construcciones.qml'
        style_vecinos = r'\estilos\todos_terrenos.qml'
        style_vertex = r'\estilos\layer_vertex.qml'
        style_lineas = r'\estilos\lineas_medidas.qml'
        style_ejevias = r'\estilos\layer_ejevia.qml'

        row = self.tableWidget.currentRow() 
        try: 
            codigo = self.tableWidget.item(row,0).text()
            sql_terreno = f''' select * from catastro.terrenosvista19  where codigo = '{codigo}' '''

            sql_construcciones = f''' select * from catastro.construccionesvista19  where codigo = '{codigo}' '''

            sql_vecinos = f''' select n.* from catastro.terrenosvista19 n, catastro.terrenosvista19 p
            where st_touches(n.geom,p.geom) 
            and p.codigo = '{codigo}'
            and n.codigo != '{codigo}' '''

            sql_vertex = f''' select (st_dumppoints(geom)).path[3] as id,
            'V'||(st_dumppoints(geom)).path[3] as nombre,
            st_x((st_dumppoints(geom)).geom) este,
            st_y((st_dumppoints(geom)).geom) norte, 
            (st_dumppoints(geom)).geom 
            from catastro.terrenos19 where codigo = '{codigo}' '''


            sql_lineas =  f''' select row_number () over () as id, round(cast(st_length(ST_MakeLine(sp,ep))as numeric) ,2) as distancia ,ST_MakeLine(sp,ep) as geom
            FROM
            -- extract the endpoints for every 2-point line segment for each linestring
            (SELECT
                ST_PointN(geom, generate_series(1, ST_NPoints(geom)-1)) as sp,
                ST_PointN(geom, generate_series(2, ST_NPoints(geom)  )) as ep
                FROM
                -- extract the individual linestrings
                (SELECT (ST_Dump(ST_Boundary(geom))).geom
                FROM catastro.terrenos19 where codigo = '{codigo}'
                ) AS linestrings
                ) AS segments  '''

            sql_ejevias = f'''select ejevias.* from catastro.ejevias
            join catastro.terrenos19  on st_intersects(st_buffer(terrenos19.geom,7),ejevias.geom)
            where terrenos19.codigo = '{codigo}' and st_intersects(st_buffer(terrenos19.geom,7),ejevias.geom) '''

            root = QgsProject.instance().layerTreeRoot() 
            group = root.addGroup(f'Terreno: {codigo}')

      
            terreno = self.addOnlyReadLayerPostgis(sql=sql_terreno,layer_name=f'Predio {codigo}',style=style_terreno)
            construcciones = self.addOnlyReadLayerPostgis(sql=sql_construcciones,layer_name=f'Construcciones {codigo}',style=style_construcciones)


            vecinos = self.addOnlyReadLayerPostgis(sql=sql_vecinos,layer_name=f'Colindantes {codigo}',style=style_vecinos)
            
            medidas = self.addOnlyReadLayerPostgis(sql=sql_lineas,layer_name=f'Distancias {codigo}',style=style_lineas)
            vertices = self.addOnlyReadLayerPostgis(sql=sql_vertex,layer_name=f'Vertices {codigo}',style=style_vertex)

            ejevias = self.addOnlyReadLayerPostgis(sql=sql_ejevias,layer_name=f'Eje Vias {codigo}',style=style_ejevias)

            lyrs = [vertices,construcciones,terreno,vecinos, medidas,ejevias]
            i = 0
            for vlyr in lyrs: 
                QgsProject.instance().addMapLayer(vlyr)
                lyr = root.findLayer(vlyr.id())
                clone = lyr.clone()
                parent = lyr.parent()
                group.insertChildNode(i,clone)
                parent.removeChildNode(lyr)
                i += 1




            
        except Exception as ex: 
            print('error addLayer',ex)

    def addOnlyReadLayerPostgis(self,sql,layer_name,style):
        """Function to add Only Read Postgis Layer

        Args:
            codigo (str): Codigo del Lote
            table (str): schema y tabla
            layer_name (str): nombre de la capa
        """        
        params = self.driver.params 
        uri = QgsDataSourceUri()
        uri.setConnection(params['host'],params['port'],params['dbname'],params['user'],params['password'])
        uri.setDataSource('',f'({sql})','geom','','id')
        layer = QgsVectorLayer(uri.uri(False),f'{layer_name}','postgres')
        layer.loadNamedStyle(self.plugin_dir + style)
        layer.triggerRepaint()

        

        # QgsProject.instance().addMapLayer(layer)
        return layer

    def addEditableLayerPostgis(self,exp,table,layer_name,style):
        params = self.driver.params 
        uri = QgsDataSourceUri()
        uri.setConnection(params['host'],params['port'],params['dbname'],params['user'],params['password'])
        uri.setDataSource('catastro',table,'geom',exp,'id')
        layer = QgsVectorLayer(uri.uri(False),f'{layer_name}','postgres')
        layer.loadNamedStyle(self.plugin_dir + style)
        layer.triggerRepaint()
        # QgsProject.instance().addMapLayer(layer)
        return layer


FORM_EJESVIALES, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'UI\ejes_vias_dialog_base.ui'))

class EjesVialesWidget(QtWidgets.QDialog,FORM_EJESVIALES) : 
    closingPlugin = pyqtSignal()
    # geomWkt = pyqtSignal(str)

    def __init__(self, parent=None):
        """Constructor."""
        super(EjesVialesWidget, self).__init__(parent)
        self.driver = DataBaseDriver()
        # self.icons = {
        #     'search' : os.path.join(os.path.dirname(__file__), r'icon\search.svg'),
        #     'trash' : os.path.join(os.path.dirname(__file__), r'icon\trash-solid.svg')
        # }
        self.plugin_dir = os.path.dirname(__file__)


       
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.UIComponents()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIComponents(self):
        self.setWindowTitle('Datos Eje de Via')
        self.pushButton.clicked.connect(self.createFeature)

        # self.geomWkt.connect(self.feature)


    def createFeature(self): 
        lyr = QgsProject.instance().mapLayersByName('nuevo_eje_via')[0]
        manzana = int(self.lineEdit.text())
        nombre = self.comboBox.currentText()
        print(nombre,manzana)
        
        try:
            if self.comboBox.currentIndex() != 0:
                feature = [f for f in iface.activeLayer().getFeatures()][0]
                geom = feature.geometry().asWkt()
                srid = iface.activeLayer().crs().authid()[5:]


                sql = f''' INSERT INTO catastro.ejevias(manzana, nombre, geom)
                VALUES({manzana}, '{nombre}', st_transform(st_geomfromtext('{geom}',{srid}),32719));
                '''
                self.driver.create(sql)

                QgsProject.instance().removeMapLayer(lyr.id())

                # for a in iface.attributesToolBar().actions(): 
                #     if a.objectName() == 'mActionDeselectAll':
                #         a.trigger()
                #         break

                for layer in iface.mapCanvas().layers(): 
                    if layer.type() == layer.VectorLayer: 
                        layer.removeSelection()

                
                iface.mapCanvas().refreshAllLayers()
            else: 
                self.driver.showMessage('Debe Seleccionar un Nombre de calle',1)
            pass
        except Exception as ex: 
            print('error createFeature',ex)


class ManzanasDialog(QtWidgets.QDialog):
    closingPlugin = pyqtSignal()
    def __init__(self):
        super().__init__()
        self.driver = DataBaseDriver()
        self.UIComponents()
        pass

    def closeEvent(self,event): 
        self.closingPlugin.emit()
        self.numManzano.clear()
        self.statusCombo.setCurrentIndex(0)
        event.accept()

    
    def UIComponents(self):
        self.setWindowTitle('Cargar Manzanos a la Base de Datos')

        labelManzano = QLabel('Ingrese el Numero de Manzano') 
        layout = QGridLayout()

        self.numManzano = QLineEdit()
        self.numManzano.setValidator(QIntValidator())
        layout.addWidget(labelManzano,0,0)
        layout.addWidget(self.numManzano,0,1)

        labelStatus = QLabel('Status de la Manzana')
        self.statusCombo = QComboBox()
        self.statusCombo.addItems(['Seleccione un Status...','Y','N'])
        layout.addWidget(labelStatus,1,0)
        layout.addWidget(self.statusCombo,1,1)

        guardarButton = QPushButton('Guardar')
        layout.addWidget(guardarButton,2,0,2,2)
        guardarButton.clicked.connect(self.createFeature)

        self.setLayout(layout)

    def createFeature(self): 
        if self.statusCombo.currentIndex() != 0 and self.numManzano.text() != '' :
            numManzano = int(self.numManzano.text())
            status = str(self.statusCombo.currentText())

            try:
                features =  iface.activeLayer().selectedFeatures()
            except AttributeError: 
                self.driver.showMessage('Debe seleccionar un manzano',1,3)
    
            try:
                lyr = iface.activeLayer()
                if len(features) == 0: 
                    self.driver.showMessage('Debe seleccionar un Manzano',1,3)
                elif len(features) > 1:
                    self.driver.showMessage('Debe seleccionar solo un Manzano',1,3)
                else: 
                    feature = features[0]
                    geom = feature.geometry().asWkt()
                    srid = iface.activeLayer().crs().authid()[5:]

                    sql = f''' INSERT INTO catastro.manzanos
                    (manzana, status, geom)
                    VALUES({numManzano}, '{status}', st_transform(st_geomfromtext('{geom}',{srid}),32719));
                    '''
                    self.driver.create(sql)

                    # QgsProject.instance().removeMapLayer(lyr.id())

                    # for a in iface.attributesToolBar().actions(): 
                    #     if a.objectName() == 'mActionDeselectAll':
                    #         a.trigger()
                    #         break

                    for layer in iface.mapCanvas().layers(): 
                        if layer.type() == layer.VectorLayer: 
                            layer.removeSelection()

                    
                    iface.mapCanvas().refreshAllLayers()

            except Exception as ex: 
                print('error createFeature',ex)

            except TypeError as ex:
                print(ex)
            
                
            
        else: 
            self.driver.showMessage('Seleccione un Status',1,3)





FORM_ZONAS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'UI\zonas_dialog_base.ui'))

class ZonasWidget(QtWidgets.QDialog,FORM_ZONAS) : 
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(ZonasWidget, self).__init__(parent)
        self.driver = DataBaseDriver()
        # self.icons = {
        #     'search' : os.path.join(os.path.dirname(__file__), r'icon\search.svg'),
        #     'trash' : os.path.join(os.path.dirname(__file__), r'icon\trash-solid.svg')
        # }
        self.plugin_dir = os.path.dirname(__file__)


       
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.UIComponents()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIComponents(self):
        self.setWindowTitle('Datos Eje de Via')
        self.pushButton.clicked.connect(self.createFeature)
        # regExp = r"^\\d{1,3}(([.]\\d{3})*),(\\d{2})$"
        

        clases = ['Seleccione una Clase...','A','B','C','D','E','F']
        categorias = ['Seleccione una Categoria...','1','2','3','4','5','6','7','8','9','10']
        self.comboBox.addItems(clases)
        self.comboBox_2.addItems(categorias)



    def createFeature(self):
        if self.comboBox.currentIndex() != 0 and self.comboBox_2.currentIndex() != 0:
            
            clase = str(self.comboBox.currentText())
            categoria = str(self.comboBox_2.currentText())
            valor_comercial = float(self.doubleSpinBox.value())
            valor_catastral = float(self.doubleSpinBox_2.value())
            # print(clase,categoria,valor_comercial,valor_catastral)
            features =  iface.activeLayer().selectedFeatures()
    
            try:
                lyr = iface.activeLayer()
                if len(features) == 0: 
                    self.driver.showMessage('Debe seleccionar una Zona',1,3)
                elif len(features) > 1:
                    self.driver.showMessage('Debe seleccionar solo Una Zona',1,3)
                else: 
                    feature = features[0]
                    geom = feature.geometry().asWkt()
                    srid = iface.activeLayer().crs().authid()[5:]

                    sql = f''' INSERT INTO catastro.zonificacion
                    (clase, subclase, valor_comercial, valor_catastral, geom)
                    VALUES('{clase}', {categoria}, {valor_comercial}, {valor_catastral}, st_transform(st_geomfromtext('{geom}',{srid}),32719));
                    '''
                    self.driver.create(sql)

                    # QgsProject.instance().removeMapLayer(lyr.id())

                    # for a in iface.attributesToolBar().actions(): 
                    #     if a.objectName() == 'mActionDeselectAll':
                    #         a.trigger()
                    #         break

                    for layer in iface.mapCanvas().layers(): 
                        if layer.type() == layer.VectorLayer: 
                            layer.removeSelection()

                    
                    iface.mapCanvas().refreshAllLayers()

            except Exception as ex: 
                print('error createFeature',ex)

            except TypeError as ex:
                print(ex)
            
                
            
        else: 
            self.driver.showMessage('Seleccione un Tipo y un Sub-Tipo',1,3)
        
        # try:
        #     if self.comboBox.currentIndex() != 0:
        #         feature = [f for f in iface.activeLayer().getFeatures()][0]
        #         geom = feature.geometry().asWkt()
        #         srid = iface.activeLayer().crs().authid()[5:]


        #         sql = f''' INSERT INTO catastro.ejevias(manzana, nombre, geom)
        #         VALUES({manzana}, '{nombre}', st_transform(st_geomfromtext('{geom}',{srid}),32719));
        #         '''
        #         self.driver.create(sql)

        #         QgsProject.instance().removeMapLayer(lyr.id())

        #         # for a in iface.attributesToolBar().actions(): 
        #         #     if a.objectName() == 'mActionDeselectAll':
        #         #         a.trigger()
        #         #         break

        #         for layer in iface.mapCanvas().layers(): 
        #             if layer.type() == layer.VectorLayer: 
        #                 layer.removeSelection()

                
        #         iface.mapCanvas().refreshAllLayers()
        #     else: 
        #         self.driver.showMessage('Debe Seleccionar un Nombre de calle',1)
        #     pass
        # except Exception as ex: 
        #     print('error createFeature',ex)

